<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Illuminate\Support\Facades\Validator;
use App\PetApiLib\Model\Pet;
use App\PetApiLib\Model\Category;
use App\PetApiLib\Model\Tag;
use App\PetApiLib\PetStatusEnum;
use App\PetApiLib\Api\PetApi;
use Illuminate\Routing\Redirector;
use Illuminate\Support\Facades\Redirect;
use Illuminate\Support\Facades\Session;
use App\PetApiLib\ApiException;

class PetStoreController extends Controller
{
    /**
     * Store a new pet or update one.
     *
     * @param Request $request
     * @return Response
     */
    public function storeOrUpdatePet(Request $request)
    {

        // Validate the request data
        $validator = Validator::make($request->all(), [
            'pet_id' => 'nullable',
            'category_id' => 'required',
            'category_name' => 'required',
            'name' => 'required|max:255',
            'file' => 'required|file|mimes:jpg,png,jpeg,gif',
            'tags' => 'nullable',
            'status' => 'required|in:' . implode(',', PetStatusEnum::getValues()),
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], Response::HTTP_UNPROCESSABLE_ENTITY);
        }

        // Retrieve the validated data
        $data = $validator->validated();

        // Create a new pet
        $pet = new Pet();
        // Categories can't be retreived from the api, so here is just a hardcoded one
        $category = new Category(['id' => $data['category_id'], 'name' => $data['category_name']]);
        // Likewise, tags can't be retreived, so here are some hardcoded ones
        $tags = array_map(function ($x){
            return new Tag(['name' => $x]);
        }, explode(',', $data['tags']));
        // Retrieve the uploaded file
        $file = $request->file('file');
        $filename = uniqid() . '_' . $file->getClientOriginalName();
        $path = $file->storeAs('public', $filename);

        if(array_key_exists('pet_id',$data)){
            $pet->setId($data['pet_id']);
        }else{
            $pet->setId(1); // in case of a real api, id would be autogenerated
        }
        
        $pet->setCategory($category);
        $pet->setName($data['name']);
        $pet->setPhotoUrls([asset('storage/' . $path)]); // can be expanded to handle multiple files easily
        $pet->setTags($tags);
        $pet->setStatus($data['status']);

        $pet_store_client = app(PetApi::class);

        try{
            
            if(array_key_exists('pet_id',$data)){
                $pet_store_client->updatePet($pet);
            }else{
                $pet_store_client->addPet($pet);
            }
            Session::flash('message', 'Pet '.( array_key_exists('pet_id',$data) ? 'updated' : 'created' ).' successfully');
        }catch(ApiException $e){
            Session::flash('exception', ['code' => $e->getCode(), 'message' => $e->getMessage(), 'headers' => $e->getResponseHeaders()]);
        }
        
        return Redirect::route('home');
    }
    /**
     * Query pets.
     *
     * @param Request $request
     * @return Response
     */
    public function queryPet(Request $request)
    {
        // Validate the request data
        $validator = Validator::make($request->all(), [
            'status' => 'required|in:' . implode(',', PetStatusEnum::getValues()),
        ]);
        
        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], Response::HTTP_UNPROCESSABLE_ENTITY);
        }
        
        // Retrieve the validated data
        $data = $validator->validated();

        $pet_store_client = app(PetApi::class);
        
        try{
            $result = $pet_store_client->findPetsByStatus($data['status']);
            Session::flash('pets', $result);
        }catch(ApiException $e){
            Session::flash('exception', ['code' => $e->getCode(), 'message' => $e->getMessage(), 'headers' => $e->getResponseHeaders()]);
        }
        return Redirect::route('home');
    }

    /**
     * Delete pet.
     *
     * @param Request $request
     * @return Response
     */
    public function deletePet(Request $request)
    {

        // Validate the request data
        $validator = Validator::make($request->all(), [
            'pet_id' => 'required',
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], Response::HTTP_UNPROCESSABLE_ENTITY);
        }

        // Retrieve the validated data
        $data = $validator->validated();

        $pet_store_client = app(PetApi::class);

        try{
            $pet_store_client->deletePet($data['pet_id']);
            Session::flash('message', 'Pet deleted successfully');
        }catch(ApiException $e){
            Session::flash('exception', ['code' => $e->getCode(), 'message' => $e->getMessage(), 'headers' => $e->getResponseHeaders()]);
        }
        // Return a success response
        return Redirect::route('home');
    }

}
